package astraiea.output;

import java.util.Date;
import java.util.List;
import java.util.logging.Formatter;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;

//////////////////////////////////////////////////////////////////////

/**Format Logger output to produce LaTeX results file.
 * 
 * @author Geoffrey Neumann
 *
 */
public final class LaTeXLogFormatter extends Formatter {

	private static final String bibliography = 
	"\n\\begin{thebibliography}{99}\n" +
		"\\bibitem{Neumann:2014:EET:2598394.2609850}\n" +
			"Geoffrey Neumann, Jerry Swan, Mark Harman and John A. Clark,\n" +
			"The Executable Experimental Template Pattern for the Systematic Comparison of Metaheuristics,\n" +
			"GECCO Comp '14,\n" +
			"2014\n" +
		"\\bibitem{Arcuri2012}\n" +
			"Andrea Arcuri and Lionel Briand,\n" +
			"A hitchhiker's guide to statistical tests for assessing randomized algorithms in software engineering,\n" +
			"Software Testing, Verification and Reliability, 24 (3),\n" +
			"2012\n" +
		"\\bibitem{Brunner2000}\n" + 
				 "Edgar Brunner and Ullrich Munzel, \n" + 
				  "The Nonparametric Behrens-Fisher Problem: Asymptotic Theory and a" + 
				  "Small-Sample Approximation, \n" + 
				  "Biometrical Journal, 42 (1), \n" + 
				  "2000, \n" + 
				  "pages 17--25\n" + 
		"\\bibitem{Gibbons2011}\n" +
				  "Jean Dickinson Gibbons and Subhabrata Chakraborti \n" +
				  "Nonparametric statistical inference \n" +
				  "2011, \n" + 
				   "Springer" +
	"\\end{thebibliography}\n";
	
	private static String latexHeader( Date date ) { 
		return "\\documentclass[]{article}\n" +
		"\\usepackage[usenames,dvipsnames]{color}\n"
		+ "\\usepackage{longtable}\n" +
		"\\begin{document}\n\n" +
		"\\section{Experimental Results (" + date + ")}\n" +
		"Experiments were performed using the \\textsc{Astraiea}\\footnote{This file has been automatically generated by Astraiea} statistical testing framework \\cite{Neumann:2014:EET:2598394.2609850},\n" +
		"which performs tests in accordance with the guidelines of ``A Hitchhikers guide to statistical testing''\n" +
		"by Briand and Arcuri~\\cite{Arcuri2012}.\n"
		+ "Unless a different reference is given, the tests are performed as described in this paper.\n\n";
	}

	private static String latexFooter =  
		"\n\n\\section{References}\n" +
		"\\bibliographystyle{plain}\n" +
		bibliography +				
		"\n\\end{document}\n";
		
	///////////////////////////////
	
	@Override	
	public String getHead( Handler h ) { return latexHeader( new Date() ); }

	@Override
	public String getTail( Handler h ) { 
		return latexFooter; 
	}

	///////////////////////////////
	
	@Override
	public String format( LogRecord record ) {
		StringBuffer buf = new StringBuffer();
		
		if( record.getLevel().intValue() < Level.WARNING.intValue() ) {
			buf.append( formatMessage( record ) );
		}
		else {
			buf.append( LaTeXLogFormatter.warningFormat( formatMessage( record ) ) );			
		}
		
		return buf.toString();
	}
	

	@Override
	public String formatMessage(LogRecord record) { return record.getMessage();	}
	
	///////////////////////////////
	
	public static String warningFormat( String message ) {
		return "\n\\textcolor{Red}{WARNING: " + message + "}\n";
	}

	///////////////////////////////

	public static String itemizeFormat( List< String > items ) {
		
		StringBuffer buf = new StringBuffer();
		
		buf.append("\\begin{itemize}\n");
		for( String item : items )
			buf.append( "\\item{" + item + "}\n");
		
		buf.append("\\end{itemize}");
		return buf.toString();
	}

	public static String tabulateItems(String[] items) {
		StringBuffer buf = new StringBuffer();
		int len = items.length;
		for(int i =0; i < len; i++){
			buf.append(items[i]);
			if(i < len - 1)
				buf.append("&");
		}
		buf.append("\\\\\n");
		return buf.toString();
	}

	/**Prints the LaTeX to start a table.
	 * 
	 * @param colHeads column headings
	 * @param title the table's title
	 * @param label label to identify the table
	 * @return
	 */
	public static String startTable(String[] colHeads, String title, String label) {
		//formatted to match http://users.sdsc.edu/~ssmallen/latex/longtable.html
		//so that tables can break over multiple lines
		
		StringBuffer buf = new StringBuffer();
		int len = colHeads.length;
		
		//prints the column heads
		StringBuffer headBuf = new StringBuffer(); 
		for(int i =0; i < len; i++){
			headBuf.append(" \\multicolumn{1}{|c|}{\\textbf{" + colHeads[i] + "}}");
			if(i < len - 1)
				headBuf.append(" & ");
		}
		
		
		buf.append("\\begin{center}\n"+
		"\\begin{longtable}{|"); 
		for(int i =0; i < len; i++)	
			buf.append("l|");
		buf.append("}\n");
		
		buf.append("\\caption[" + title + "]{" + title + "} \\label{" + label + "} \\\\ \n");

		buf.append("\\hline");
		buf.append(headBuf + "\n");
		buf.append("\\\\ \\hline \n");
		buf.append("\\endfirsthead \n");

		buf.append("\\multicolumn{" + len + "}{c}{{\\bfseries \\tablename\\ \\thetable{} -- continued from previous page}} \\\\ \n \\hline \n");
		buf.append(headBuf + "\n");

		buf.append("\\endhead \n");

		buf.append("\\hline \\multicolumn{" + len + "}{|r|}{{Continued on next page}} \\\\ \\hline \n");
		buf.append("\\endfoot \n");
		buf.append("\\hline \n");
		buf.append("\\endlastfoot \n");
		
		return buf.toString();
	}
	
	public static String endTable(){
		return "\n\\hline\n\\end{longtable}\n\\end{center}\n";
	}
}

// End ///////////////////////////////////////////////////////////////


